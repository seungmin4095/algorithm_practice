# -*- coding: utf-8 -*-
"""section6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zt27sTmFu5ZCI0l-GdWzTz1ZYUaMTAjK

#섹션6
"""

# n = int(input())
# c = []
# def div(n):
#     a = n // 2
#     b = n % 2
#     c.append(b)
#     if a > 1:
#         return div(a)
#     else:
#         c.append(a)
# div(n)

# for i in range(1,len(c)+1):
#     print(c[-i],end='')

# def DFS(v):
#     if v>7:
#         return
#     else:
#         DFS(v*2)          #전위순회
#         print(v, end=' ') #중위순회
#         DFS(v*2+1)        #후위순회                          
# DFS(1)

# def DFS(v):      다시하기
#     if v==n+1:
#         for i in range(1,n+1):
#             if ch[i] == 1:
#                 print(i, end=' ')
#         print()
#     else:
#         ch[v] = 1
#         DFS(v+1)
#         ch[v] = 0
#         DFS(v+1)

# n = int(input())
# ch = [0]*(n+1)
# DFS(1)

# import sys      다시하기
# def DFS(l, sum):
#     if l == n:
#         if sum==(total-sum):
#             print('YES')
#             sys.exit(0)
#     else:
#         DFS(l+1, sum+num[l])
#         DFS(l+1, sum)

# n = int(input())
# num = list(map(int,input().split()))
# total = sum(num)
# DFS(0,0)
# print("NO")

# def DFS(L, sum, tsum):
#     global result
#     if sum+(total-tsum)<result:
#         return
#     if sum>c:
#         return
#     if L==n:
#         if sum>result:
#             result=sum
#     else:
#         DFS(L+1, sum+a[L], tsum+a[L])
#         DFS(L+1, sum, tsum+a[L])


# if __name__=="__main__":
#     c, n=map(int, input().split())
#     a=[0]*n
#     result=-2147000000
#     for i in range(n):
#         a[i]=int(input())
#     total=sum(a)
#     DFS(0, 0, 0)
#     print(result)

# def DFS(L):
#     global cnt
#     if L==m:
#         for i in range(m):
#             print(res[i], end=' ')
#         print()
#         cnt+=1
#     else:
#         for i in range(1, n+1):
#             res[L]=i
#             DFS(L+1)

# if __name__=="__main__":
#     n, m=map(int, input().split())
#     res=[0]*n
#     cnt=0
#     DFS(0)
#     print(cnt)

# def DFS(L, sum):
#     global res
#     if L>=res:
#         return
#     if sum>m:
#         return
#     if sum==m:
#         if L<res:
#             res=L
#     else:
#         for i in range(n):
#             DFS(L+1, sum+a[i])

# if __name__=="__main__":
#     n=int(input())
#     a=list(map(int, input().split()))
#     m=int(input())
#     res=2147000000
#     a.sort(reverse=True)
#     DFS(0, 0)
#     print(res)

# def DFS(L):
#     global cnt
#     if L==m:
#         for i in range(m):
#             print(res[i], end=' ')
#         print()
#         cnt+=1
#     else:
#         for i in range(1, n+1):
#             if ch[i]==0:
#                 ch[i]=1
#                 res[L]=i
#                 DFS(L+1)
#                 ch[i]=0

# if __name__=="__main__":
#     n, m=map(int, input().split())
#     res=[0]*n
#     ch=[0]*(n+1)
#     cnt=0
#     DFS(0)
#     print(cnt)

# def DFS(L, sum):
#     if L==n and sum==f:
#         for x in p:
#             print(x, end=' ')
#         sys.exit(0)
#     else:
#         for i in range(1, n+1):
#             if ch[i]==0:
#                 ch[i]=1
#                 p[L]=i
#                 DFS(L+1, sum+(p[L]*b[L]))
#                 ch[i]=0

# if __name__ == "__main__":
#     n, f=map(int, input().split())
#     p=[0]*n
#     b=[1]*n
#     ch=[0]*(n+1)
#     for i in range(1, n):
#         b[i]=b[i-1]*(n-i)//i
#     DFS(0, 0)

# def DFS(L, s):
#     global cnt
#     if L==m:
#         for i in range(m):
#             print(res[i], end=' ')
#         print()
#         cnt+=1
#     else:
#         for i in range(s, n+1):
#             res[L]=i
#             DFS(L+1, i+1)
           

# n, m=map(int, input().split())
# res=[0]*(n+1)
# cnt=0
# DFS(0, 1)
# print(cnt)

# def DFS(L, s, sum):
#     global cnt
#     if L==k:
#         if sum%m==0:
#             cnt+=1
#     else:
#         for i in range(s, n):
#             DFS(L+1, i+1, sum+a[i])
 
# if __name__=="__main__":
#     n, k=map(int, input().split())
#     a=list(map(int, input().split()))
#     m=int(input())
#     cnt=0
#     DFS(0, 0, 0)
#     print(cnt)

def DFS(v):
    global cnt, path
    if v==n:
        cnt+=1
        for x in path:
            print(x, end=' ')
        print()
    else:
        for i in range(1, n+1):
            if g[v][i]==1 and ch[i]==0:
                ch[i]=1
                path.append(i)
                DFS(i)
                path.pop()
                ch[i]=0
           
if __name__=="__main__":
    n, m=map(int, input().split())
    g=[[0]*(n+1) for _ in range(n+1)]
    ch=[0]*(n+1)
    for i in range(m):
        a, b=map(int, input().split())
        g[a][b]=1
    cnt=0
    ch[1]=1
    path=list()
    path.append(1)
    DFS(1)
    print(cnt)